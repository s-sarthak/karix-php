<?php
/**
 * NumberSearchApi
 * PHP version 5
 *
 * @category Class
 * @package  Karix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * karix api
 *
 * Karix API lets you interact with the Karix platform using an omnichannel messaging API. It also allows you to query your account, set up webhooks and buy phone numbers.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@karix.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Karix\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Karix\ApiException;
use Karix\Configuration;
use Karix\HeaderSelector;
use Karix\ObjectSerializer;

/**
 * NumberSearchApi Class Doc Comment
 *
 * @category Class
 * @package  Karix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NumberSearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     *
     * @codeCoverageIgnore
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchNumber
     *
     * Query for phone numbers in our inventory.
     *
     * @param  int $offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param  int $limit The numbers of items to return. (optional, default to 10)
     * @param  string $country Filter by country ISO. Only one country can be filtered at a time. If no country filter is provided then results for United States are returned by default. (optional, default to US)
     * @param  string $prefix Filter by numbers with this prefix after country code (optional)
     * @param  string $contains Filter by numbers which contain this value (optional)
     * @param  string[] $number_type Filter by number type: fixed, mobile, tollfree (optional)
     *
     * @throws \Karix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Karix\Model\PhoneNumberListResponse
     */
    public function searchNumber($offset = '0', $limit = '10', $country = 'US', $prefix = null, $contains = null, $number_type = null)
    {
        list($response) = $this->searchNumberWithHttpInfo($offset, $limit, $country, $prefix, $contains, $number_type);
        return $response;
    }

    /**
     * Operation searchNumberWithHttpInfo
     *
     * Query for phone numbers in our inventory.
     *
     * @param  int $offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param  int $limit The numbers of items to return. (optional, default to 10)
     * @param  string $country Filter by country ISO. Only one country can be filtered at a time. If no country filter is provided then results for United States are returned by default. (optional, default to US)
     * @param  string $prefix Filter by numbers with this prefix after country code (optional)
     * @param  string $contains Filter by numbers which contain this value (optional)
     * @param  string[] $number_type Filter by number type: fixed, mobile, tollfree (optional)
     *
     * @throws \Karix\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Karix\Model\PhoneNumberListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchNumberWithHttpInfo($offset = '0', $limit = '10', $country = 'US', $prefix = null, $contains = null, $number_type = null)
    {
        $returnType = '\Karix\Model\PhoneNumberListResponse';
        $request = $this->searchNumberRequest($offset, $limit, $country, $prefix, $contains, $number_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            $this->searchNumberSetResponseObject($e);
            throw $e;
        }
    }

    /**
     * Operation searchNumberAsync
     *
     * Query for phone numbers in our inventory.
     *
     * @param  int $offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param  int $limit The numbers of items to return. (optional, default to 10)
     * @param  string $country Filter by country ISO. Only one country can be filtered at a time. If no country filter is provided then results for United States are returned by default. (optional, default to US)
     * @param  string $prefix Filter by numbers with this prefix after country code (optional)
     * @param  string $contains Filter by numbers which contain this value (optional)
     * @param  string[] $number_type Filter by number type: fixed, mobile, tollfree (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchNumberAsync($offset = '0', $limit = '10', $country = 'US', $prefix = null, $contains = null, $number_type = null)
    {
        return $this->searchNumberAsyncWithHttpInfo($offset, $limit, $country, $prefix, $contains, $number_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchNumberAsyncWithHttpInfo
     *
     * Query for phone numbers in our inventory.
     *
     * @param  int $offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param  int $limit The numbers of items to return. (optional, default to 10)
     * @param  string $country Filter by country ISO. Only one country can be filtered at a time. If no country filter is provided then results for United States are returned by default. (optional, default to US)
     * @param  string $prefix Filter by numbers with this prefix after country code (optional)
     * @param  string $contains Filter by numbers which contain this value (optional)
     * @param  string[] $number_type Filter by number type: fixed, mobile, tollfree (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchNumberAsyncWithHttpInfo($offset = '0', $limit = '10', $country = 'US', $prefix = null, $contains = null, $number_type = null)
    {
        $returnType = '\Karix\Model\PhoneNumberListResponse';
        $request = $this->searchNumberRequest($offset, $limit, $country, $prefix, $contains, $number_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($request, $returnType) {
                    $statusCode = $response->getStatusCode();
                    if ($statusCode < 200 || $statusCode > 299) {
                        $exception = new ApiException(
                            sprintf(
                                '[%d] Error connecting to the API (%s)',
                                $statusCode,
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $response->getBody()
                        );
                        $this->searchNumberSetResponseObject($exception);
                        throw $exception;
                    }
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    if ($exception instanceof RequestException) {
                        $response = $exception->getResponse();
                        if ($response) {
                            $statusCode = $response->getStatusCode();
                            $e = new ApiException(
                                sprintf(
                                    '[%d] Error connecting to the API (%s)',
                                    $statusCode,
                                    $exception->getRequest()->getUri()
                                ),
                                $statusCode,
                                $response->getHeaders(),
                                $response->getBody()
                            );
                            $this->searchNumberSetResponseObject($e);
                            throw $e;
                        }
                        throw new ApiException(
                            "[{$exception->getCode()}] {$exception->getMessage()}",
                            $exception->getCode(),
                            $exception->getResponse() ? $exception->getResponse()->getHeaders() : null,
                            $exception->getResponse() ? $exception->getResponse()->getBody()->getContents() : null
                        );
                    }
                    throw $exception;
                }
            );
    }

    /**
     * Create request for operation 'searchNumber'
     *
     * @param  int $offset The number of items to skip before starting to collect the result set. (optional, default to 0)
     * @param  int $limit The numbers of items to return. (optional, default to 10)
     * @param  string $country Filter by country ISO. Only one country can be filtered at a time. If no country filter is provided then results for United States are returned by default. (optional, default to US)
     * @param  string $prefix Filter by numbers with this prefix after country code (optional)
     * @param  string $contains Filter by numbers which contain this value (optional)
     * @param  string[] $number_type Filter by number type: fixed, mobile, tollfree (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchNumberRequest($offset = '0', $limit = '10', $country = 'US', $prefix = null, $contains = null, $number_type = null)
    {
        // set constants with only one allowable value
        $api_version = '2.0';
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling searchNumber'
            );
        }

        $resourcePath = '/numbersearch/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($prefix !== null) {
            $queryParams['prefix'] = ObjectSerializer::toQueryValue($prefix);
        }
        // query params
        if ($contains !== null) {
            $queryParams['contains'] = ObjectSerializer::toQueryValue($contains);
        }
        // query params
        if (is_array($number_type)) {
            $number_type = ObjectSerializer::serializeCollection($number_type, 'csv', true);
        }
        if ($number_type !== null) {
            $queryParams['number_type'] = ObjectSerializer::toQueryValue($number_type);
        }
        // header params
        if ($api_version !== null) {
            $headerParams['api-version'] = ObjectSerializer::toHeaderValue($api_version);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
    * Sets the response object for an ApiException based on status code
    */
    protected function searchNumberSetResponseObject($api_exception)
    {
        switch ($api_exception->getCode()) {
            case 200:
                $data = ObjectSerializer::deserialize(
                    $api_exception->getResponseBody(),
                    '\Karix\Model\PhoneNumberListResponse',
                    $api_exception->getResponseHeaders()
                );
                $api_exception->setResponseObject($data);
                break;
            case 403:
                $data = ObjectSerializer::deserialize(
                    $api_exception->getResponseBody(),
                    '\Karix\Model\UnauthorizedResponse',
                    $api_exception->getResponseHeaders()
                );
                $api_exception->setResponseObject($data);
                break;
            case 500:
                $data = ObjectSerializer::deserialize(
                    $api_exception->getResponseBody(),
                    '\Karix\Model\ErrorResponse',
                    $api_exception->getResponseHeaders()
                );
                $api_exception->setResponseObject($data);
                break;
        }
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
