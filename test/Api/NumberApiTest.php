<?php
/**
 * NumberApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Karix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * karix api
 *
 * Karix API lets you interact with the Karix platform using an omnichannel messaging API. It also allows you to query your account, set up webhooks and buy phone numbers.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@karix.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Karix;

use \Karix\Configuration;
use \Karix\ApiException;
use \Karix\ObjectSerializer;

/**
 * NumberApiTest Class Doc Comment
 *
 * @category Class
 * @package  Karix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NumberApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for deleteNumber
     *
     * Unrent number from your account.
     *
     */
    public function testDeleteNumber()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 204;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $apiInstance->deleteNumber($num);
        } catch (Exception $e) {
            $this->fail("Exception when calling NumberApi->deleteNumber: ".$e->getMessage());
        }
    }

    /**
     * Test case for deleteNumber with RequestException
     *
     * Unrent number from your account.
     *
     */
    public function testDeleteNumberException()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_exception = new \GuzzleHttp\Exception\RequestException(
            "Error Communicating with Server",
            new \GuzzleHttp\Psr7\Request('DELETE', 'test')
        );
        $mock = new \GuzzleHttp\Handler\MockHandler([$expected_exception]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $apiInstance->deleteNumber($num);
            $this->fail("No exception when calling NumberApi->deleteNumber with mocked exception");
        } catch (ApiException $e) {
            $this->assertEquals("[0] ".$expected_exception->getMessage(), $e->getMessage());
        }
    }

    /**
     * Test case for deleteNumber with  response
     *
     * Unrent number from your account.
     *
     */
    public function testDeleteNumberHTTPErrorResponses()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $apiInstance->deleteNumber($num);
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
        }
        $expected_code = 403;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $apiInstance->deleteNumber($num);
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
        }
        $expected_code = 404;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $apiInstance->deleteNumber($num);
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
        }
        $expected_code = 500;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $apiInstance->deleteNumber($num);
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
        }
    }

    /**
     * Test case for deleteNumber with  response
     *
     * Unrent number from your account.
     *
     */
    public function testDeleteNumberErrorResponses()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $apiInstance->deleteNumber($num);
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
        }
        $expected_code = 403;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $apiInstance->deleteNumber($num);
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
        }
        $expected_code = 404;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $apiInstance->deleteNumber($num);
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
        }
        $expected_code = 500;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $apiInstance->deleteNumber($num);
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
        }
    }

    /**
     * Test case for deleteNumber for required parameters
     *
     * Unrent number from your account.
     *
     */
    public function testDeleteNumberRequiredParams()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 204;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $_tempVal = $num;
        $num = null;
        try {
            $apiInstance->deleteNumber($num);
            $this->fail("No exception when calling NumberApi->deleteNumber with null num");
        } catch (\InvalidArgumentException $e) {
            $this->assertEquals('Missing the required parameter $num when calling deleteNumber', $e->getMessage());
        }
        $num = $_tempVal;
    }

    /**
     * Test case for deleteNumber Async
     *
     * Unrent number from your account.
     *
     */
    public function testDeleteNumberAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 204;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->deleteNumberAsync($num)->then(function ($result) {
        }, function ($exception) {
            $this->fail("Exception when calling NumberApi->deleteNumber: ".$e->getMessage());
        });
        $promise->wait();
    }

    /**
     * Test case for deleteNumber Async with RequestException
     *
     * Unrent number from your account.
     *
     */
    public function testDeleteNumberExceptionAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_exception = new \GuzzleHttp\Exception\RequestException(
            "Error Communicating with Server",
            new \GuzzleHttp\Psr7\Request('DELETE', 'test')
        );
        $mock = new \GuzzleHttp\Handler\MockHandler([$expected_exception]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->deleteNumberAsync($num)->then(function ($result) {
            $this->fail("No exception when calling NumberApi->deleteNumber with mocked exception");
        }, function ($exception) use( &$expected_exception) {
            $this->assertEquals("[0] ".$expected_exception->getMessage(), $exception->getMessage());
        });
        $promise->wait();
    }

    /**
     * Test case for deleteNumber Async with  response
     *
     * Unrent number from your account.
     *
     */
    public function testDeleteNumberHTTPErrorResponsesAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->deleteNumberAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
        });
        $promise->wait();
        $expected_code = 403;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->deleteNumberAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
        });
        $promise->wait();
        $expected_code = 404;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->deleteNumberAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
        });
        $promise->wait();
        $expected_code = 500;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->deleteNumberAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
        });
        $promise->wait();
    }

    /**
     * Test case for deleteNumber Async with  response
     *
     * Unrent number from your account.
     *
     */
    public function testDeleteNumberErrorResponsesAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->deleteNumberAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
        });
        $promise->wait();
        $expected_code = 403;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->deleteNumberAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
        });
        $promise->wait();
        $expected_code = 404;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->deleteNumberAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
        });
        $promise->wait();
        $expected_code = 500;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], null),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->deleteNumberAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->deleteNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
        });
        $promise->wait();
    }

    /**
     * Test case for getNumber
     *
     * Get details of all phone numbers linked to your account..
     *
     */
    public function testGetNumber()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 200;
        // Create a mock response
        $expected = new \Karix\Model\AccountNumberListResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        try {
            $result = $apiInstance->getNumber($offset, $limit, $country, $contains, $number_type);
            $this->assertEquals($expected, $result);
        } catch (Exception $e) {
            $this->fail("Exception when calling NumberApi->getNumber: ".$e->getMessage());
        }
    }

    /**
     * Test case for getNumber with RequestException
     *
     * Get details of all phone numbers linked to your account..
     *
     */
    public function testGetNumberException()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_exception = new \GuzzleHttp\Exception\RequestException(
            "Error Communicating with Server",
            new \GuzzleHttp\Psr7\Request('GET', 'test')
        );
        $mock = new \GuzzleHttp\Handler\MockHandler([$expected_exception]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        try {
            $result = $apiInstance->getNumber($offset, $limit, $country, $contains, $number_type);
            $this->fail("No exception when calling NumberApi->getNumber with mocked exception");
        } catch (ApiException $e) {
            $this->assertEquals("[0] ".$expected_exception->getMessage(), $e->getMessage());
        }
    }

    /**
     * Test case for getNumber with  response
     *
     * Get details of all phone numbers linked to your account..
     *
     */
    public function testGetNumberHTTPErrorResponses()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        try {
            $result = $apiInstance->getNumber($offset, $limit, $country, $contains, $number_type);
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        try {
            $result = $apiInstance->getNumber($offset, $limit, $country, $contains, $number_type);
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        try {
            $result = $apiInstance->getNumber($offset, $limit, $country, $contains, $number_type);
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
    }

    /**
     * Test case for getNumber with  response
     *
     * Get details of all phone numbers linked to your account..
     *
     */
    public function testGetNumberErrorResponses()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        try {
            $result = $apiInstance->getNumber($offset, $limit, $country, $contains, $number_type);
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        try {
            $result = $apiInstance->getNumber($offset, $limit, $country, $contains, $number_type);
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        try {
            $result = $apiInstance->getNumber($offset, $limit, $country, $contains, $number_type);
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
    }

    /**
     * Test case for getNumber for required parameters
     *
     * Get details of all phone numbers linked to your account..
     *
     */
    public function testGetNumberRequiredParams()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 200;
        // Create a mock response
        $expected = new \Karix\Model\AccountNumberListResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

    }

    /**
     * Test case for getNumber Async
     *
     * Get details of all phone numbers linked to your account..
     *
     */
    public function testGetNumberAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 200;
        // Create a mock response
        $expected = new \Karix\Model\AccountNumberListResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        $promise = $apiInstance->getNumberAsync($offset, $limit, $country, $contains, $number_type)->then(function ($result) use( &$expected) {
            $this->assertEquals($expected, $result);
        }, function ($exception) {
            $this->fail("Exception when calling NumberApi->getNumber: ".$e->getMessage());
        });
        $promise->wait();
    }

    /**
     * Test case for getNumber Async with RequestException
     *
     * Get details of all phone numbers linked to your account..
     *
     */
    public function testGetNumberExceptionAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_exception = new \GuzzleHttp\Exception\RequestException(
            "Error Communicating with Server",
            new \GuzzleHttp\Psr7\Request('GET', 'test')
        );
        $mock = new \GuzzleHttp\Handler\MockHandler([$expected_exception]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        $promise = $apiInstance->getNumberAsync($offset, $limit, $country, $contains, $number_type)->then(function ($result) {
            $this->fail("No exception when calling NumberApi->getNumber with mocked exception");
        }, function ($exception) use( &$expected_exception) {
            $this->assertEquals("[0] ".$expected_exception->getMessage(), $exception->getMessage());
        });
        $promise->wait();
    }

    /**
     * Test case for getNumber Async with  response
     *
     * Get details of all phone numbers linked to your account..
     *
     */
    public function testGetNumberHTTPErrorResponsesAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        $promise = $apiInstance->getNumberAsync($offset, $limit, $country, $contains, $number_type)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        $promise = $apiInstance->getNumberAsync($offset, $limit, $country, $contains, $number_type)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        $promise = $apiInstance->getNumberAsync($offset, $limit, $country, $contains, $number_type)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
    }

    /**
     * Test case for getNumber Async with  response
     *
     * Get details of all phone numbers linked to your account..
     *
     */
    public function testGetNumberErrorResponsesAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        $promise = $apiInstance->getNumberAsync($offset, $limit, $country, $contains, $number_type)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        $promise = $apiInstance->getNumberAsync($offset, $limit, $country, $contains, $number_type)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $offset = 0;
        $limit = 10;
        $country = "country_example";
        $contains = "contains_example";
        $number_type = array("number_type_example");

        $promise = $apiInstance->getNumberAsync($offset, $limit, $country, $contains, $number_type)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
    }

    /**
     * Test case for getNumberDetails
     *
     * Get details of a number.
     *
     */
    public function testGetNumberDetails()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 200;
        // Create a mock response
        $expected = new \Karix\Model\AccountNumberResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->assertEquals($expected, $result);
        } catch (Exception $e) {
            $this->fail("Exception when calling NumberApi->getNumberDetails: ".$e->getMessage());
        }
    }

    /**
     * Test case for getNumberDetails with RequestException
     *
     * Get details of a number.
     *
     */
    public function testGetNumberDetailsException()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_exception = new \GuzzleHttp\Exception\RequestException(
            "Error Communicating with Server",
            new \GuzzleHttp\Psr7\Request('GET', 'test')
        );
        $mock = new \GuzzleHttp\Handler\MockHandler([$expected_exception]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->fail("No exception when calling NumberApi->getNumberDetails with mocked exception");
        } catch (ApiException $e) {
            $this->assertEquals("[0] ".$expected_exception->getMessage(), $e->getMessage());
        }
    }

    /**
     * Test case for getNumberDetails with  response
     *
     * Get details of a number.
     *
     */
    public function testGetNumberDetailsHTTPErrorResponses()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
    }

    /**
     * Test case for getNumberDetails with  response
     *
     * Get details of a number.
     *
     */
    public function testGetNumberDetailsErrorResponses()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
    }

    /**
     * Test case for getNumberDetails for required parameters
     *
     * Get details of a number.
     *
     */
    public function testGetNumberDetailsRequiredParams()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 200;
        // Create a mock response
        $expected = new \Karix\Model\AccountNumberResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $_tempVal = $num;
        $num = null;
        try {
            $result = $apiInstance->getNumberDetails($num);
            $this->fail("No exception when calling NumberApi->getNumberDetails with null num");
        } catch (\InvalidArgumentException $e) {
            $this->assertEquals('Missing the required parameter $num when calling getNumberDetails', $e->getMessage());
        }
        $num = $_tempVal;
    }

    /**
     * Test case for getNumberDetails Async
     *
     * Get details of a number.
     *
     */
    public function testGetNumberDetailsAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 200;
        // Create a mock response
        $expected = new \Karix\Model\AccountNumberResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->getNumberDetailsAsync($num)->then(function ($result) use( &$expected) {
            $this->assertEquals($expected, $result);
        }, function ($exception) {
            $this->fail("Exception when calling NumberApi->getNumberDetails: ".$e->getMessage());
        });
        $promise->wait();
    }

    /**
     * Test case for getNumberDetails Async with RequestException
     *
     * Get details of a number.
     *
     */
    public function testGetNumberDetailsExceptionAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_exception = new \GuzzleHttp\Exception\RequestException(
            "Error Communicating with Server",
            new \GuzzleHttp\Psr7\Request('GET', 'test')
        );
        $mock = new \GuzzleHttp\Handler\MockHandler([$expected_exception]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->getNumberDetailsAsync($num)->then(function ($result) {
            $this->fail("No exception when calling NumberApi->getNumberDetails with mocked exception");
        }, function ($exception) use( &$expected_exception) {
            $this->assertEquals("[0] ".$expected_exception->getMessage(), $exception->getMessage());
        });
        $promise->wait();
    }

    /**
     * Test case for getNumberDetails Async with  response
     *
     * Get details of a number.
     *
     */
    public function testGetNumberDetailsHTTPErrorResponsesAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->getNumberDetailsAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->getNumberDetailsAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->getNumberDetailsAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->getNumberDetailsAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
    }

    /**
     * Test case for getNumberDetails Async with  response
     *
     * Get details of a number.
     *
     */
    public function testGetNumberDetailsErrorResponsesAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->getNumberDetailsAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->getNumberDetailsAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->getNumberDetailsAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;

        $promise = $apiInstance->getNumberDetailsAsync($num)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->getNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
    }

    /**
     * Test case for patchNumberDetails
     *
     * Edit phone number belonging to your account.
     *
     */
    public function testPatchNumberDetails()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 200;
        // Create a mock response
        $expected = new \Karix\Model\AccountNumberResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->assertEquals($expected, $result);
        } catch (Exception $e) {
            $this->fail("Exception when calling NumberApi->patchNumberDetails: ".$e->getMessage());
        }
    }

    /**
     * Test case for patchNumberDetails with RequestException
     *
     * Edit phone number belonging to your account.
     *
     */
    public function testPatchNumberDetailsException()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_exception = new \GuzzleHttp\Exception\RequestException(
            "Error Communicating with Server",
            new \GuzzleHttp\Psr7\Request('PATCH', 'test')
        );
        $mock = new \GuzzleHttp\Handler\MockHandler([$expected_exception]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No exception when calling NumberApi->patchNumberDetails with mocked exception");
        } catch (ApiException $e) {
            $this->assertEquals("[0] ".$expected_exception->getMessage(), $e->getMessage());
        }
    }

    /**
     * Test case for patchNumberDetails with  response
     *
     * Edit phone number belonging to your account.
     *
     */
    public function testPatchNumberDetailsHTTPErrorResponses()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
    }

    /**
     * Test case for patchNumberDetails with  response
     *
     * Edit phone number belonging to your account.
     *
     */
    public function testPatchNumberDetailsErrorResponses()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
    }

    /**
     * Test case for patchNumberDetails for required parameters
     *
     * Edit phone number belonging to your account.
     *
     */
    public function testPatchNumberDetailsRequiredParams()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 200;
        // Create a mock response
        $expected = new \Karix\Model\AccountNumberResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $_tempVal = $num;
        $num = null;
        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No exception when calling NumberApi->patchNumberDetails with null num");
        } catch (\InvalidArgumentException $e) {
            $this->assertEquals('Missing the required parameter $num when calling patchNumberDetails', $e->getMessage());
        }
        $num = $_tempVal;
        $_tempVal = $number;
        $number = null;
        try {
            $result = $apiInstance->patchNumberDetails($num, $number);
            $this->fail("No exception when calling NumberApi->patchNumberDetails with null number");
        } catch (\InvalidArgumentException $e) {
            $this->assertEquals('Missing the required parameter $number when calling patchNumberDetails', $e->getMessage());
        }
        $number = $_tempVal;
    }

    /**
     * Test case for patchNumberDetails Async
     *
     * Edit phone number belonging to your account.
     *
     */
    public function testPatchNumberDetailsAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 200;
        // Create a mock response
        $expected = new \Karix\Model\AccountNumberResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $promise = $apiInstance->patchNumberDetailsAsync($num, $number)->then(function ($result) use( &$expected) {
            $this->assertEquals($expected, $result);
        }, function ($exception) {
            $this->fail("Exception when calling NumberApi->patchNumberDetails: ".$e->getMessage());
        });
        $promise->wait();
    }

    /**
     * Test case for patchNumberDetails Async with RequestException
     *
     * Edit phone number belonging to your account.
     *
     */
    public function testPatchNumberDetailsExceptionAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_exception = new \GuzzleHttp\Exception\RequestException(
            "Error Communicating with Server",
            new \GuzzleHttp\Psr7\Request('PATCH', 'test')
        );
        $mock = new \GuzzleHttp\Handler\MockHandler([$expected_exception]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $promise = $apiInstance->patchNumberDetailsAsync($num, $number)->then(function ($result) {
            $this->fail("No exception when calling NumberApi->patchNumberDetails with mocked exception");
        }, function ($exception) use( &$expected_exception) {
            $this->assertEquals("[0] ".$expected_exception->getMessage(), $exception->getMessage());
        });
        $promise->wait();
    }

    /**
     * Test case for patchNumberDetails Async with  response
     *
     * Edit phone number belonging to your account.
     *
     */
    public function testPatchNumberDetailsHTTPErrorResponsesAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $promise = $apiInstance->patchNumberDetailsAsync($num, $number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $promise = $apiInstance->patchNumberDetailsAsync($num, $number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $promise = $apiInstance->patchNumberDetailsAsync($num, $number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $promise = $apiInstance->patchNumberDetailsAsync($num, $number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
    }

    /**
     * Test case for patchNumberDetails Async with  response
     *
     * Edit phone number belonging to your account.
     *
     */
    public function testPatchNumberDetailsErrorResponsesAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $promise = $apiInstance->patchNumberDetailsAsync($num, $number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $promise = $apiInstance->patchNumberDetailsAsync($num, $number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $promise = $apiInstance->patchNumberDetailsAsync($num, $number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $num = 56;
        $number = new \Karix\Model\EditAccountNumber();

        $promise = $apiInstance->patchNumberDetailsAsync($num, $number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->patchNumberDetails when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
    }

    /**
     * Test case for rentNumber
     *
     * Rent a phone number.
     *
     */
    public function testRentNumber()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 201;
        // Create a mock response
        $expected = new \Karix\Model\NumberRentedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->assertEquals($expected, $result);
        } catch (Exception $e) {
            $this->fail("Exception when calling NumberApi->rentNumber: ".$e->getMessage());
        }
    }

    /**
     * Test case for rentNumber with RequestException
     *
     * Rent a phone number.
     *
     */
    public function testRentNumberException()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_exception = new \GuzzleHttp\Exception\RequestException(
            "Error Communicating with Server",
            new \GuzzleHttp\Psr7\Request('POST', 'test')
        );
        $mock = new \GuzzleHttp\Handler\MockHandler([$expected_exception]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No exception when calling NumberApi->rentNumber with mocked exception");
        } catch (ApiException $e) {
            $this->assertEquals("[0] ".$expected_exception->getMessage(), $e->getMessage());
        }
    }

    /**
     * Test case for rentNumber with  response
     *
     * Rent a phone number.
     *
     */
    public function testRentNumberHTTPErrorResponses()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 400;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 402;
        // Create a mock response
        $expected = new \Karix\Model\InsufficientBalanceResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
    }

    /**
     * Test case for rentNumber with  response
     *
     * Rent a phone number.
     *
     */
    public function testRentNumberErrorResponses()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 400;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 402;
        // Create a mock response
        $expected = new \Karix\Model\InsufficientBalanceResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        } catch (ApiException $e) {
            $this->assertEquals($expected_code, $e->getCode());
            $this->assertEquals($expected, $e->getResponseObject());
        }
    }

    /**
     * Test case for rentNumber for required parameters
     *
     * Rent a phone number.
     *
     */
    public function testRentNumberRequiredParams()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 201;
        // Create a mock response
        $expected = new \Karix\Model\NumberRentedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $_tempVal = $number;
        $number = null;
        try {
            $result = $apiInstance->rentNumber($number);
            $this->fail("No exception when calling NumberApi->rentNumber with null number");
        } catch (\InvalidArgumentException $e) {
            $this->assertEquals('Missing the required parameter $number when calling rentNumber', $e->getMessage());
        }
        $number = $_tempVal;
    }

    /**
     * Test case for rentNumber Async
     *
     * Rent a phone number.
     *
     */
    public function testRentNumberAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 201;
        // Create a mock response
        $expected = new \Karix\Model\NumberRentedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) use( &$expected) {
            $this->assertEquals($expected, $result);
        }, function ($exception) {
            $this->fail("Exception when calling NumberApi->rentNumber: ".$e->getMessage());
        });
        $promise->wait();
    }

    /**
     * Test case for rentNumber Async with RequestException
     *
     * Rent a phone number.
     *
     */
    public function testRentNumberExceptionAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_exception = new \GuzzleHttp\Exception\RequestException(
            "Error Communicating with Server",
            new \GuzzleHttp\Psr7\Request('POST', 'test')
        );
        $mock = new \GuzzleHttp\Handler\MockHandler([$expected_exception]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No exception when calling NumberApi->rentNumber with mocked exception");
        }, function ($exception) use( &$expected_exception) {
            $this->assertEquals("[0] ".$expected_exception->getMessage(), $exception->getMessage());
        });
        $promise->wait();
    }

    /**
     * Test case for rentNumber Async with  response
     *
     * Rent a phone number.
     *
     */
    public function testRentNumberHTTPErrorResponsesAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 400;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 402;
        // Create a mock response
        $expected = new \Karix\Model\InsufficientBalanceResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
    }

    /**
     * Test case for rentNumber Async with  response
     *
     * Rent a phone number.
     *
     */
    public function testRentNumberErrorResponsesAsync()
    {
        // Configure HTTP basic authorization: basicAuth
        $config = Configuration::getDefaultConfiguration()
                      ->setUsername('YOUR_USERNAME')
                      ->setPassword('YOUR_PASSWORD');

        $expected_code = 400;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 401;
        // Create a mock response
        $expected = null;
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 402;
        // Create a mock response
        $expected = new \Karix\Model\InsufficientBalanceResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 403;
        // Create a mock response
        $expected = new \Karix\Model\UnauthorizedResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 404;
        // Create a mock response
        $expected = new \Karix\Model\NotFoundResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
        $expected_code = 500;
        // Create a mock response
        $expected = new \Karix\Model\ErrorResponse();
        // Create a mock handler
        $mock = new \GuzzleHttp\Handler\MockHandler([
            new \GuzzleHttp\Psr7\Response($expected_code, [], $expected),
        ]);
        $handler = \GuzzleHttp\HandlerStack::create($mock);
        $client = new \GuzzleHttp\Client(['handler' => $handler, 'http_errors' => false]);

        $apiInstance = new Api\NumberApi(
            $client,
            $config
        );
        $number = new \Karix\Model\RentNumber();

        $promise = $apiInstance->rentNumberAsync($number)->then(function ($result) {
            $this->fail("No error response when calling NumberApi->rentNumber when mocked to return error");
        }, function ($exception) use(&$expected_code, &$expected) {
            $this->assertEquals($expected_code, $exception->getCode());
            $this->assertEquals($expected, $exception->getResponseObject());
        });
        $promise->wait();
    }
}
