<?php
/**
 * CreateMessageContentTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Karix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * karix api
 *
 * Karix API lets you interact with the Karix platform using an omnichannel messaging API. It also allows you to query your account, set up webhooks and buy phone numbers.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@karix.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Karix;

/**
 * CreateMessageContentTest Class Doc Comment
 *
 * @category    Class
 * @description Content to be sent to the destinations. - For channel &#x60;sms&#x60; only &#x60;text&#x60; content is supported - For channel &#x60;whatsapp&#x60; one of either &#x60;text&#x60; or &#x60;location&#x60; is allowed
 * @package     Karix
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateMessageContentTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "CreateMessageContent"
     */
    public function testCreateMessageContent()
    {
    }

    /**
     * Test attribute "text"
     */
    public function testPropertyText()
    {
        $create_message_content = new \Karix\Model\CreateMessageContent();
        $text = "Hey, Rick. It's Rick.";
        
        $create_message_content->setText($text);
        $this->assertEquals($text, $create_message_content->getText());

        // Check for validations
        // Check for maxLength 4096
        $create_message_content->setText(str_repeat("a", 4096));
        try
        {
            $create_message_content->setText(str_repeat("a", 4096)."a");
            $this->fail("$create_message_content->setText accepted input greater than 4096");
        }
        catch(\InvalidArgumentException $e){}

        // Check for minLength 1
        $create_message_content->setText(str_repeat("a", 1));
        try
        {
            $create_message_content->setText(substr(str_repeat("a", 1), 0, -1));
            $this->fail("$create_message_content->setText accepted input less than 1");
        }
        catch(\InvalidArgumentException $e){}

    }

    /**
     * Test attribute "location"
     */
    public function testPropertyLocation()
    {
        $create_message_content = new \Karix\Model\CreateMessageContent();
        
        
        $subobj = new \Karix\Model\CreateMessageContentLocation();
        

        $location = $subobj;
        
        $create_message_content->setLocation($location);
        $this->assertEquals($location, $create_message_content->getLocation());

    }

    /**
    * Helper to create a good example of model
    */
    public function getGoodExample()
    {
        $text = "Hey, Rick. It's Rick.";
        
        
        
        $subobj = new \Karix\Model\CreateMessageContentLocation();
        

        $location = $subobj;
        
        return array(
            "text" => $text,
            "location" => $location,
        );
    }

    /**
    * Test CreateMessageContent validation
    */
    public function testValidation()
    {
        $example = $this->getGoodExample();
        $create_message_content = new \Karix\Model\CreateMessageContent($example);
        $this->assertTrue($create_message_content->valid());
    }

    /**
    *
    */
    public function testMaxLengthPropertyText()
    {
        $example = $this->getGoodExample();

        $example['text'] = str_repeat("a", 4096)."a";

        $create_message_content = new \Karix\Model\CreateMessageContent($example);
        $this->assertFalse($create_message_content->valid());

        $invalidProperties = $create_message_content->listInvalidProperties();
        $this->assertContains("invalid value for 'text', the character length must be smaller than or equal to 4096.", $invalidProperties);
    }

    /**
    *
    */
    public function testMinLengthPropertyText()
    {
        $example = $this->getGoodExample();

        $example['text'] = substr(str_repeat("a", 1), 0, -1);

        $create_message_content = new \Karix\Model\CreateMessageContent($example);
        $this->assertFalse($create_message_content->valid());

        $invalidProperties = $create_message_content->listInvalidProperties();
        $this->assertContains("invalid value for 'text', the character length must be bigger than or equal to 1.", $invalidProperties);
    }

}
