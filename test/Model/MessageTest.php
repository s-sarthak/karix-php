<?php
/**
 * MessageTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Karix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * karix api
 *
 * Karix API lets you interact with the Karix platform using an omnichannel messaging API. It also allows you to query your account, set up webhooks and buy phone numbers.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@karix.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Karix;

/**
 * MessageTest Class Doc Comment
 *
 * @category    Class
 * @description Message
 * @package     Karix
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MessageTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "Message"
     */
    public function testMessage()
    {
    }

    /**
     * Test attribute "uid"
     */
    public function testPropertyUid()
    {
        $message = new \Karix\Model\Message();
        $uid = "5a507caf-0769-4914-a7f7-54f5a064b52a";
        
        $message->setUid($uid);
        $this->assertEquals($uid, $message->getUid());

    }

    /**
     * Test attribute "account_uid"
     */
    public function testPropertyAccountUid()
    {
        $message = new \Karix\Model\Message();
        $account_uid = "5a507caf-0769-4914-a7f7-54f5a064b52a";
        
        $message->setAccountUid($account_uid);
        $this->assertEquals($account_uid, $message->getAccountUid());

    }

    /**
     * Test attribute "total_cost"
     */
    public function testPropertyTotalCost()
    {
        $message = new \Karix\Model\Message();
        $total_cost = "0.0032";
        
        $message->setTotalCost($total_cost);
        $this->assertEquals($total_cost, $message->getTotalCost());

    }

    /**
     * Test attribute "refund"
     */
    public function testPropertyRefund()
    {
        $message = new \Karix\Model\Message();
        $refund = "example value";
        
        $message->setRefund($refund);
        $this->assertEquals($refund, $message->getRefund());

    }

    /**
     * Test attribute "source"
     */
    public function testPropertySource()
    {
        $message = new \Karix\Model\Message();
        $source = "14154009186";
        
        $message->setSource($source);
        $this->assertEquals($source, $message->getSource());

    }

    /**
     * Test attribute "destination"
     */
    public function testPropertyDestination()
    {
        $message = new \Karix\Model\Message();
        $destination = "+15623158625";
        
        $message->setDestination($destination);
        $this->assertEquals($destination, $message->getDestination());

    }

    /**
     * Test attribute "country"
     */
    public function testPropertyCountry()
    {
        $message = new \Karix\Model\Message();
        $country = "US";
        
        $message->setCountry($country);
        $this->assertEquals($country, $message->getCountry());

    }

    /**
     * Test attribute "content_type"
     */
    public function testPropertyContentType()
    {
        $message = new \Karix\Model\Message();
        $content_type = "text";
        
        $message->setContentType($content_type);
        $this->assertEquals($content_type, $message->getContentType());

        // Check for enum
        $message->setContentType("text");
        $message->setContentType("location");
        try
        {
            $message->setContentType("Invalid Edwfere");
            $this->fail("$message->setContentType accepted input outside of enum");
        }
        catch(\InvalidArgumentException $e){}

    }

    /**
     * Test attribute "content"
     */
    public function testPropertyContent()
    {
        $message = new \Karix\Model\Message();
        
        
        $subobj = new \Karix\Model\MessageContent();
        

        $content = $subobj;
        
        $message->setContent($content);
        $this->assertEquals($content, $message->getContent());

    }

    /**
     * Test attribute "created_time"
     */
    public function testPropertyCreatedTime()
    {
        $message = new \Karix\Model\Message();
        $datetime = \DateTime::createFromFormat(\DateTime::ISO8601, '2017-08-04T09:59:29.660Z');
        $created_time = $datetime;
        
        $message->setCreatedTime($created_time);
        $this->assertEquals($created_time, $message->getCreatedTime());

    }

    /**
     * Test attribute "sent_time"
     */
    public function testPropertySentTime()
    {
        $message = new \Karix\Model\Message();
        $datetime = \DateTime::createFromFormat(\DateTime::ISO8601, '2017-08-04T09:59:29.660Z');
        $sent_time = $datetime;
        
        $message->setSentTime($sent_time);
        $this->assertEquals($sent_time, $message->getSentTime());

    }

    /**
     * Test attribute "delivered_time"
     */
    public function testPropertyDeliveredTime()
    {
        $message = new \Karix\Model\Message();
        $datetime = \DateTime::createFromFormat(\DateTime::ISO8601, '2017-08-04T09:59:29.660Z');
        $delivered_time = $datetime;
        
        $message->setDeliveredTime($delivered_time);
        $this->assertEquals($delivered_time, $message->getDeliveredTime());

    }

    /**
     * Test attribute "updated_time"
     */
    public function testPropertyUpdatedTime()
    {
        $message = new \Karix\Model\Message();
        $datetime = \DateTime::createFromFormat(\DateTime::ISO8601, '2017-08-04T09:59:29.660Z');
        $updated_time = $datetime;
        
        $message->setUpdatedTime($updated_time);
        $this->assertEquals($updated_time, $message->getUpdatedTime());

    }

    /**
     * Test attribute "status"
     */
    public function testPropertyStatus()
    {
        $message = new \Karix\Model\Message();
        $status = "delivered";
        
        $message->setStatus($status);
        $this->assertEquals($status, $message->getStatus());

        // Check for enum
        $message->setStatus("queued");
        $message->setStatus("sent");
        $message->setStatus("failed");
        $message->setStatus("delivered");
        $message->setStatus("read");
        $message->setStatus("undelivered");
        $message->setStatus("rejected");
        try
        {
            $message->setStatus("Invalid Edwfere");
            $this->fail("$message->setStatus accepted input outside of enum");
        }
        catch(\InvalidArgumentException $e){}

    }

    /**
     * Test attribute "direction"
     */
    public function testPropertyDirection()
    {
        $message = new \Karix\Model\Message();
        $direction = "outbound";
        
        $message->setDirection($direction);
        $this->assertEquals($direction, $message->getDirection());

        // Check for enum
        $message->setDirection("inbound");
        $message->setDirection("outbound");
        try
        {
            $message->setDirection("Invalid Edwfere");
            $this->fail("$message->setDirection accepted input outside of enum");
        }
        catch(\InvalidArgumentException $e){}

    }

    /**
     * Test attribute "error"
     */
    public function testPropertyError()
    {
        $message = new \Karix\Model\Message();
        
        
        $subobj = new \Karix\Model\MessageError();
        

        $error = $subobj;
        
        $message->setError($error);
        $this->assertEquals($error, $message->getError());

    }

    /**
     * Test attribute "redact"
     */
    public function testPropertyRedact()
    {
        $message = new \Karix\Model\Message();
        $redact = true;
        
        $message->setRedact($redact);
        $this->assertEquals($redact, $message->getRedact());

    }

    /**
     * Test attribute "channel_details"
     */
    public function testPropertyChannelDetails()
    {
        $message = new \Karix\Model\Message();
        
        
        $subobj = new \Karix\Model\MessageChannelDetails();
        

        $channel_details = $subobj;
        
        $message->setChannelDetails($channel_details);
        $this->assertEquals($channel_details, $message->getChannelDetails());

    }

    /**
    * Helper to create a good example of model
    */
    public function getGoodExample()
    {
        $uid = "5a507caf-0769-4914-a7f7-54f5a064b52a";
        
        $account_uid = "5a507caf-0769-4914-a7f7-54f5a064b52a";
        
        $total_cost = "0.0032";
        
        $refund = "example value";
        
        $source = "14154009186";
        
        $destination = "+15623158625";
        
        $country = "US";
        
        $content_type = "text";
        
        
        
        $subobj = new \Karix\Model\MessageContent();
        

        $content = $subobj;
        
        $datetime = \DateTime::createFromFormat(\DateTime::ISO8601, '2017-08-04T09:59:29.660Z');
        $created_time = $datetime;
        
        $datetime = \DateTime::createFromFormat(\DateTime::ISO8601, '2017-08-04T09:59:29.660Z');
        $sent_time = $datetime;
        
        $datetime = \DateTime::createFromFormat(\DateTime::ISO8601, '2017-08-04T09:59:29.660Z');
        $delivered_time = $datetime;
        
        $datetime = \DateTime::createFromFormat(\DateTime::ISO8601, '2017-08-04T09:59:29.660Z');
        $updated_time = $datetime;
        
        $status = "delivered";
        
        $direction = "outbound";
        
        
        
        $subobj = new \Karix\Model\MessageError();
        

        $error = $subobj;
        
        $redact = true;
        
        
        
        $subobj = new \Karix\Model\MessageChannelDetails();
        

        $channel_details = $subobj;
        
        return array(
            "uid" => $uid,
            "account_uid" => $account_uid,
            "total_cost" => $total_cost,
            "refund" => $refund,
            "source" => $source,
            "destination" => $destination,
            "country" => $country,
            "content_type" => $content_type,
            "content" => $content,
            "created_time" => $created_time,
            "sent_time" => $sent_time,
            "delivered_time" => $delivered_time,
            "updated_time" => $updated_time,
            "status" => $status,
            "direction" => $direction,
            "error" => $error,
            "redact" => $redact,
            "channel_details" => $channel_details,
        );
    }

    /**
    * Test Message validation
    */
    public function testValidation()
    {
        $example = $this->getGoodExample();
        $message = new \Karix\Model\Message($example);
        $this->assertTrue($message->valid());
    }

    /**
    *
    */
    public function testEnumPropertyContentType()
    {
        $example = $this->getGoodExample();
        $example['content_type'] = "Invalid Edwfere";
        $message = new \Karix\Model\Message($example);
        $this->assertFalse($message->valid());

        $allowedValues = $message->getContentTypeAllowableValues();
        $err_msg = sprintf(
            "invalid value for 'content_type', must be one of '%s'",
            implode("', '", $allowedValues)
        );
        $invalidProperties = $message->listInvalidProperties();
        $this->assertContains($err_msg, $invalidProperties);
    }

    /**
    *
    */
    public function testEnumPropertyStatus()
    {
        $example = $this->getGoodExample();
        $example['status'] = "Invalid Edwfere";
        $message = new \Karix\Model\Message($example);
        $this->assertFalse($message->valid());

        $allowedValues = $message->getStatusAllowableValues();
        $err_msg = sprintf(
            "invalid value for 'status', must be one of '%s'",
            implode("', '", $allowedValues)
        );
        $invalidProperties = $message->listInvalidProperties();
        $this->assertContains($err_msg, $invalidProperties);
    }

    /**
    *
    */
    public function testEnumPropertyDirection()
    {
        $example = $this->getGoodExample();
        $example['direction'] = "Invalid Edwfere";
        $message = new \Karix\Model\Message($example);
        $this->assertFalse($message->valid());

        $allowedValues = $message->getDirectionAllowableValues();
        $err_msg = sprintf(
            "invalid value for 'direction', must be one of '%s'",
            implode("', '", $allowedValues)
        );
        $invalidProperties = $message->listInvalidProperties();
        $this->assertContains($err_msg, $invalidProperties);
    }

}
